package com.example.demo.gui;

import com.example.demo.menager.MonitoringCheckIn;
import com.example.demo.menager.SnmpMenager;
import org.snmp4j.smi.VariableBinding;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import javax.swing.*;
import java.io.IOException;
import java.util.List;

@Component("Form")
public class Form extends JFrame {

    String before = "";
    SnmpMenager men ;
    MonitoringCheckIn checkIn;

    public Form() throws IOException {
        this.setVisible(true);
        initComponents();
        txtSet.setEnabled(false);
        men = new SnmpMenager(this);
        System.out.println(men);
        checkIn = new MonitoringCheckIn(men);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {


        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtIP = new javax.swing.JTextField();
        txtPort = new javax.swing.JTextField();
        txtCommunity = new javax.swing.JTextField();
        comboVersion = new javax.swing.JComboBox<>();
        comboFunction = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        btnAccept = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtOID = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();
        txtSet = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("IP adress:");

        jLabel2.setText("Port:");

        jLabel3.setText("Community:");

        jLabel4.setText("Version:");

        comboVersion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3" }));

        comboFunction.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Get", "Get Next", "Get Bulk", "Walk", "Set" }));
        comboFunction.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboFunctionItemStateChanged(evt);
            }
        });

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        btnAccept.setText("Accept");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });

        jLabel5.setText("Function:");

        jLabel6.setText("OID:");

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jLabel7.setText("Set value:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel1)
                                                        .addComponent(jLabel2)
                                                        .addComponent(jLabel3)
                                                        .addComponent(jLabel4)
                                                        .addComponent(jLabel5))
                                                .addGap(26, 26, 26))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel6)
                                                        .addComponent(jLabel7))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtSet)
                                        .addComponent(txtOID)
                                        .addComponent(txtIP)
                                        .addComponent(txtPort)
                                        .addComponent(txtCommunity)
                                        .addComponent(comboVersion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(comboFunction, 0, 309, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(btnClear)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnAccept)))
                                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(txtOID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel6))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel1)
                                                        .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel2)
                                                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel3)
                                                        .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel4)
                                                        .addComponent(comboVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(comboFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel5))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnAccept)
                                        .addComponent(btnClear)
                                        .addComponent(txtSet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel7))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {
        txtArea.setLineWrap(true);
        String IP = txtIP.getText();
        String community = txtCommunity.getText();
        String port = txtPort.getText();
        String function = "" + comboFunction.getSelectedItem();
        String OID = txtOID.getText();
        int version = Integer.parseInt(comboVersion.getSelectedItem() + "") - 1;
        try {
            validate(IP,port,community, OID, function, version);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,e.getMessage(),"",JOptionPane.ERROR_MESSAGE);
        }

        try {
            men.setIp(IP);
            men.setPort(port);
            men.setCommunity(community);
            men.setVersion(version);

            VariableBinding vb;
            switch (function) {
                case "Get":
                    vb = men.get(OID);
                    txtArea.setText(before + vb.getOid() + " = " + vb.getVariable());
                    before = txtArea.getText() + "\n";
                    break;
                case "Get Next":
                    vb = men.getnext(OID);
                    txtArea.setText(before + vb.getOid() + " = " + vb.getVariable());
                    before = txtArea.getText() + "\n";
                    break;
                case "Set":
                    String set = txtSet.getText();
                    if(set.isEmpty()){
                        JOptionPane.showMessageDialog(null, "Please enter the value for set!","", JOptionPane.ERROR_MESSAGE);
                    }
                    String str;
                    if(isNumber(set)){
                        int setNo = Integer.parseInt(set);
                        str = men.set(setNo, OID);
                    }else {
                        str = men.set(set, OID);
                    }
                    txtArea.setText(before+str);
                    before = txtArea.getText() + "\n";
                    break;
                case "Walk":
                    List<VariableBinding> listaVB = men.walk(OID);
                    for (VariableBinding vb1 : listaVB) {
                        //System.out.println(vb1.getOid() + " = " + vb1.getVariable());
                        txtArea.setText(before + vb1.getOid() + " = " + vb1.getVariable());
                        before = txtArea.getText() + "\n";
                    }
                    break;
                case "Get Bulk":
                    List<VariableBinding> listaVB1 = men.getbulk(OID);
                    for (VariableBinding vb1 : listaVB1) {
                        //System.out.println(vb1.getOid() + " = " + vb1.getVariable());
                        txtArea.setText(before + vb1.getOid() + " = " + vb1.getVariable());
                        before = txtArea.getText() + "\n";
                    }
                    break;
                default:

                    break;

            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private void validate(String ip, String port, String community, String oid, String function, int version) throws Exception {
        String errorMessage = "";
        if (ip.isEmpty()) {
            errorMessage += "IP adress can not be empty!\n";
        }
        if (port.isEmpty()) {
            errorMessage += "Port can not be empty!\n";
        }
        if (!isNumber(port)) {
            errorMessage += "Port can not contain letter!\n";
        }
        if (community.isEmpty()) {
            errorMessage += "Community can not be empty!\n";
        }
        if (version<0) {
            errorMessage += "Version can not be empty!\n";
        }
        if (function.isEmpty()) {
            errorMessage += "Function can not be empty!\n";
        }
        if (oid.isEmpty()) {
            errorMessage += "OID can not be empty!\n";
        }
        if (!errorMessage.isEmpty()) {
            throw new Exception(errorMessage);
        }
    }

    private boolean isNumber(String s){
        String x = s.toLowerCase();
        for(int i=0;i<x.length();i++){
            if((x.charAt(i)>='a' && x.charAt(i)<='z')){
                System.out.println(x.charAt(i) + "  false");
                return false;
            }
        }
        return true;
    }

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {
        txtArea.setText("");
        before = "";
    }
    private void comboFunctionItemStateChanged(java.awt.event.ItemEvent evt) {
        if(comboFunction.getSelectedItem().equals("Set")){
            txtSet.setEnabled(true);
        }else{
            txtSet.setText("");
            txtSet.setEnabled(false);
        }
    }

    // Variables declaration - do not modify
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnClear;
    private javax.swing.JComboBox<String> comboFunction;
    private javax.swing.JComboBox<String> comboVersion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtCommunity;
    private javax.swing.JTextField txtIP;
    private javax.swing.JTextField txtOID;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtSet;

    public void setTrapMessage(String trapMessage) {
        txtArea.setText(before + trapMessage);
        before = txtArea.getText() + "\n";
    }
    // End of variables declaration
}
